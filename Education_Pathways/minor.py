# using hard-coded data for testing purpose, should be fetch in database later on
engineering_minor_list = {
    'Artificial Intelligence Minor' : ["APS360H1","CSC263H1","ECE345H1","ECE358H1","MIE335H1","CSC384H1","MIE369H1","ROB311H1","ECE421H1","MIE424H1","ROB313H1","CHE507H1","CSC420H1","CSC485H1","ECE368H1","MIE451H1","MIE457H1","MIE562H1","MIE566H1","MSE403H1","ROB501H1","AER336H1","BME595H1","CHE322H1","ECE344H1","ECE353H1","ECE356H1","ECE367H1","ECE411H1","ECE419H1","ECE431H1","ECE444H1","ECE454H1","ECE470H1","ECE516H1","ECE532H1","ECE557H1","ECE568H1"],
    'Advanced Manufacturing Minor' : ["CHE441H1","MIE304H1","MIE342H1","MIE354H1","AER525H1","CHE462H1","CHE562H1","CHE475H1","CHE561H1","ECE470H1","FOR424H1","MIE368H1","MIE422H1","MIE440H1","MIE441H1","MIE443H1","MIE469H1","MIE540H1","MIE562H1","MIE566H1","MSE419H1","MSE431H1","MSE443H1","MSE455H1","MSE461H1"],
    'Bioengineering Minor' : ["CHE353H1","BME205H1","BME455H1","BME331H1","CHE354H1","BME498Y1","BME440H1","BME330H1","BME350H1","BME395H1","BME445H1","BME595H1","CHE462H1","CHE471H1","CHE475H1","CHE564H1","CIV541H1","ECE331H1","ECE335H1","ECE431H1","ECE446H1","ECE448H1","ECE516H1","FOR421H1","FOR424H1","FOR425H1","MIE242H1","MIE343H1","MIE439H1","MIE458H1"],
    'Environmental Engineering Minor' : ["CME259H1","ESC203H1","ENV221H1","CIV220H1","CIV440H1","CHE460H1","CHE467H1"],
    'Sustainable Energy Minor' : ["CIV300H1","CHE260H1","CHE323H1","CHE467H1","CIV375H1","ECE313H1","ECE314H1","ECE349H1","AER507H1","CHE451H1","CHE566H1","CIV531H1","ECE520H1","MIE407H1","MIE515H1","MIE516H1","APS510H1"],
    'Engineering Business Minor' : ["CHE249H1","CHE374H1","CME368H1","ECE472H1","MIE258H1","JRE300H1","JRE410H1","JRE420H1","APS500H1","APS502H1","ECO101H1","FOR308H1","MIE488H1","MIE354H1","TEP234H1","TEP445H1","APS510H1"],
    'Robotics and Mechatronics Minor' : ["CHE322H1","ECE311H1","ECE356H1","MIE404H1","AER372H1","BME344H1","AER525H1","ECE470H1","MIE422H1","MIE443H1","MIE444H1","AER301H1","APS360H1","BME350H1","ECE316H1","ECE345H1","MIE243H1","MIE301H1","ROB310H1"],
    'Biomedical Engineering Minor' : ["BME440H1"], # ["CHE353H1F", "BME331H1S", "BME440H1", "MIE439H1S", "BME530H1S", "BME499Y1Y", "BME498Y1Y"],
    'Nanoengineering Minor' : ["ECE335H1","BME346H1","ECE330H1","ECE350H1","CHE562H1","ECE427H1","MSE430H1","MSE438H1","MSE459H1","PHY427H1","BME440H1","CHE475H1","FOR424H1","FOR424H1","MSE443H1"],
    'Music Performance Minor' : ["ECE446H1","PMU299Y1","TMU130H1","TMU111H1","TMU406H1","HMU111H1","MUS211H1","MUS306H1"],
}

# Calcualting the percentage of minor fulfillment
def check_course_in_minor(course):
    minor = None
    for i in engineering_minor_list:
        if course in engineering_minor_list[i]:
            minor = i

    return minor
